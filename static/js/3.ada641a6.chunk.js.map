{"version":3,"file":"static/js/3.ada641a6.chunk.js","mappings":"4LACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,aAAe,8BAA8B,aAAe,+B,SCkBlO,EATmB,SAACA,GAChB,OACI,gBAAKC,UAAS,UAAKC,EAAAA,OAAc,YAAIA,EAAAA,QAAiB,UAClD,SAAC,KAAO,CAACC,GAAE,mBAAcH,EAAMI,IAAK,SAAEJ,EAAMK,QAGxD,ECFA,EANgB,SAACL,GACb,OACI,gBAAKC,UAAWC,EAAAA,QAAgB,SAAEF,EAAMM,SAEhD,E,UCwBMC,EAAiB,SAACP,GAYpB,OACI,4BACI,yCACA,SAAC,KAAM,CACHQ,cAAe,CAACC,eAAgB,IAChCC,SAAU,SAAAC,GACN,IAAMC,EAAmC,CAAC,EAI1C,OAHKD,EAAOF,iBACRG,EAAOH,eAAiB,YAErBG,CACX,EACAC,SAAU,SAACF,IAhBD,SAACA,GACnBX,EAAMc,YAAYH,EAAOF,eAC7B,CAegBM,CAAcJ,GACdA,EAAOF,eAAiB,EAC5B,EAAE,SACD,kBACG,UAAC,KAAI,YACD,iBAAKR,UAAWC,EAAAA,aAAqB,WACjC,SAAC,KAAK,CAACc,KAAM,OAAQX,KAAM,iBAAkBY,YAAa,oBAC1D,SAAC,KAAY,CAACZ,KAAK,iBAAiBa,UAAU,YAGlD,mBAAQjB,UAAWC,EAAAA,aAAsBc,KAAM,SAAS,oBACrD,MAK3B,EAEA,EArEgB,SAAChB,GAEb,IAAMmB,EAAQnB,EAAMoB,YAEdC,EAAiBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAU,CAACnB,KAAMmB,EAAEnB,KAAMD,GAAIoB,EAAEpB,IAAM,IAC9EqB,EAAkBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAO,CAACrB,QAASqB,EAAErB,SAAW,IAE/E,OAAIN,EAAM4B,QAGN,iBAAK3B,UAAWC,EAAAA,QAAgB,WAC5B,gBAAKD,UAAWC,EAAAA,aAAqB,SAC/BmB,KAEN,iBAAKpB,UAAWC,EAAAA,SAAiB,WAC7B,yBACMuB,KAEN,0BACG,SAAClB,GAAc,UAAKP,aAZV,SAAC,KAAQ,CAACG,GAAI,UAiB3C,E,wCCNM0B,GAAmBC,EAAAA,EAAAA,KAjBD,SAACX,GACrB,MAAO,CACHC,YAAaD,EAAMC,YACnBQ,OAAQT,EAAMY,KAAKH,OAE3B,IAE2B,SAACI,GACxB,MAAO,CACHlB,YAAa,SAACL,GACVuB,EAASC,EAAAA,EAAAA,mBAA2BxB,GACxC,EAER,IAMA,GAAeyB,EAAAA,EAAAA,IAA6BL,EAAiBM,EAAAA,EAA7D,CAA+EC,E,4GC1BzEC,EAA6B,SAAClB,GAAK,MAAM,CAC3CS,OAAQT,EAAMY,KAAKH,OACtB,EAEYO,EAAmB,SAACG,GAS7B,OAFuCR,EAAAA,EAAAA,IAAQO,EAARP,EANb,SAAC9B,GAEnB,OAAIA,EAAM4B,QACH,SAACU,GAAS,UAAKtC,KADG,SAAC,KAAQ,CAACG,GAAI,UAE/C,GAKJ,C","sources":["webpack://social/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"messageInput\":\"Dialogs_messageInput__RpvMK\",\"submitButton\":\"Dialogs_submitButton__UxAcD\"};","import React from \"react\";\nimport { NavLink } from 'react-router-dom';\n\nimport classes from '.././Dialogs.module.css';\n\ntype PropsType = {\n    id: number,\n    name: string\n}\n\nconst DialogItem = (props: PropsType) => {\n    return (\n        <div className={`${classes.dialog} ${classes.active}`}>\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem;","import React from \"react\";\n\nimport classes from '.././Dialogs.module.css';\n\ntype PropsType = {\n    message: string\n}\n\nconst Message = (props: PropsType) => {\n    return (\n        <div className={classes.message}>{props.message}</div>\n    )\n}\n\nexport default Message;","import React from \"react\";\nimport { Navigate, NavLink } from 'react-router-dom';\nimport DialogItem from './DialogItem/DialogItem'\nimport Message from \"./Message/Message\";\nimport classes from './Dialogs.module.css';\nimport {Formik, Form, Field, ErrorMessage, FormikErrors} from \"formik\";\nimport { DialogsPropsFromConnect } from \"./DialogsContainer\";\n\n\n\nconst Dialogs = (props: DialogsPropsFromConnect) => {\n\n    const state = props.dialogsPage;\n\n    const dialogsElement = state.dialogs.map(d => <DialogItem name={d.name} id={d.id} />);\n    const messagesElement = state.messages.map(m => <Message message={m.message} />);\n\n    if(!props.isAuth) return <Navigate to={'/login'} />\n\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                { dialogsElement }\n            </div>\n            <div className={classes.messages}>\n                <div>\n                    { messagesElement }\n                </div>\n                <div>\n                   <AddMessageForm {...props}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst AddMessageForm = (props: DialogsPropsFromConnect) => {\n\n    type FormValues = typeof initialValues\n\n    const initialValues = {\n        newMessageBody: ''\n    }\n\n    const addNewMessage = (values: FormValues) => {\n        props.sendMessage(values.newMessageBody)\n    }\n    \n    return (\n        <div>\n            <h1>Add Message</h1>\n            <Formik\n                initialValues={{newMessageBody: \"\"}}\n                validate={values => {\n                    const errors: FormikErrors<FormValues> = {};\n                    if (!values.newMessageBody) {\n                        errors.newMessageBody = 'Required';\n                    } \n                    return errors;\n                }}\n                onSubmit={(values) => {\n                    addNewMessage(values)\n                    values.newMessageBody = ''\n                }}>\n                {() => (\n                    <Form>\n                        <div className={classes.messageInput}>\n                            <Field type={'text'} name={'newMessageBody'} placeholder={'add message...'}/>\n                            <ErrorMessage name=\"newMessageBody\" component=\"div\"/>\n                        </div>\n\n                        <button className={classes.submitButton} type={'submit'}>Send</button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n}\n\nexport default Dialogs;","import React from \"react\";\nimport Dialogs from \"./Dialogs\";\nimport {connect, ConnectedProps} from 'react-redux'\nimport { actions } from \"../../redux/dialogsReducer\";\nimport { Navigate } from \"react-router-dom\";\nimport { WithAuthRedirect } from \"../../hoc/WithAuthRedirect\";\nimport { compose } from \"redux\";\nimport { AppDispatch, AppStateType } from \"../../redux/reduxStore\";\n\n\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage,\n        isAuth: state.auth.isAuth\n    }\n}\n\nconst mapDispatchToProps = (dispatch: AppDispatch) => {\n    return {\n        sendMessage: (newMessageBody: string) => {\n            dispatch(actions.sendMessageCreator(newMessageBody))\n        }\n    }\n}\n\nexport type DialogsPropsFromConnect = ConnectedProps<typeof DialogsConnector>\n\nconst DialogsConnector = connect(mapStateToProps, mapDispatchToProps)\n\nexport default compose<React.ComponentType>(DialogsConnector,WithAuthRedirect)(Dialogs)\n\n","import React from \"react\"\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\n\nconst mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n})\n\nexport const WithAuthRedirect = (Component) => {\n    const RedirectComponent = (props) => {\n        \n            if(!props.isAuth) return <Navigate to={'/login'} />\n            return <Component {...props}/>\n    }\n\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n  \n    return ConnectedAuthRedirectComponent;\n}"],"names":["props","className","classes","to","id","name","message","AddMessageForm","initialValues","newMessageBody","validate","values","errors","onSubmit","sendMessage","addNewMessage","type","placeholder","component","state","dialogsPage","dialogsElement","dialogs","map","d","messagesElement","messages","m","isAuth","DialogsConnector","connect","auth","dispatch","actions","compose","WithAuthRedirect","Dialogs","mapStateToPropsForRedirect","Component"],"sourceRoot":""}