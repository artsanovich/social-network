{"version":3,"file":"static/js/271.c10441e7.chunk.js","mappings":"kNACA,EAA2B,2BAA3B,EAAqE,+B,mBCmB/DA,EAAW,WAEb,IAAMC,GAAwBC,EAAAA,EAAAA,MAExBC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKH,MAAM,IASrE,OAPAI,EAAAA,EAAAA,YAAU,WAEN,OADAN,GAASO,EAAAA,EAAAA,OACF,WACHP,GAASQ,EAAAA,EAAAA,MACb,CACJ,GAAG,KAGC,2BACgB,UAAXN,IAAsB,uEACvB,iCACI,SAACO,EAAQ,KACT,SAACC,EAAc,SAI/B,EAEMD,EAAe,WAEjB,IAAME,GAAWR,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKM,QAAQ,IACnEC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAsCC,EAAAA,EAAAA,WAAS,GAAM,eAA9CC,EAAY,KAAEC,EAAa,KAiBlC,OANAV,EAAAA,EAAAA,YAAU,WACa,IAAD,EAAdS,IACyB,QAAzB,EAAAH,EAAkBK,eAAO,OAAzB,EAA2BC,eAAe,CAACC,MAAO,MAAOC,SAAU,WAE3E,GAAG,CAACT,KAGA,iBAAKU,UAAWC,EAAkBC,SAhBhB,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACfC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC5EhB,GAAgBC,GAAc,GAE/BD,GAAgBC,GAAc,EAEtC,EAS8D,UACvDL,EAASqB,KAAI,SAACC,GAAO,OAAK,SAACC,EAAO,CAAkBD,QAASA,GAArBA,EAAQE,GAAuB,KACxE,gBAAKC,IAAKxB,MAGpB,EAEMsB,GAA6CG,EAAAA,EAAAA,OAAK,YAAgB,IAAdJ,EAAO,EAAPA,QAEtD,OACI,4BACI,SAAC,IAAM,CAACK,IAAKL,EAAQM,MAAOC,MAAO,CAACC,MAAO,UAAU,KAAC,uBAAIR,EAAQS,YAClE,kBACCT,EAAQA,SACT,oBAGZ,IAEMvB,EAAqB,WAEvB,IAAMR,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAmB,OAAKA,EAAMC,KAAKH,MAAM,IAE/DF,GAAwBC,EAAAA,EAAAA,MAE9B,GAA8Ba,EAAAA,EAAAA,UAAS,IAAG,eAAnCmB,EAAO,KAAEU,EAAU,KAS1B,OACI,4BACA,0BAAK,SAACC,EAAA,EAAQ,CAAEC,SAAU,SAACrB,GAAC,OAAKmB,EAAWnB,EAAEE,cAAcoB,MAAM,EAAEA,MAAOb,EAASc,UAAQ,EAAC1B,UAAWC,OACxG,0BAAK,SAAC,KAAM,CAAC0B,KAAK,UAAUC,QAVZ,WACbhB,IACCjC,GAASkD,EAAAA,EAAAA,IAAwBjB,IACjCU,EAAW,IAEnB,EAKsDQ,SAAqB,UAAXjD,EAAmB,sBAGvF,EAEA,EAlGqB,WAGjB,OACI,0BACI,SAACH,EAAI,KAGjB,C","sources":["webpack://social/./src/pages/Chat/ChatPage.module.css?29d9","pages/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"ChatPage_messages__fwl3z\",\"messageInput\":\"ChatPage_messageInput__OahDJ\"};","import { Avatar, Button, Input } from \"antd\";\nimport { FC, UIEvent, useEffect, useRef, useState, memo } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { sendMessageThunkCreator, startMessagesListeningThunkCreator, stopMessagesListeningThunkCreator } from \"../../redux/chatReducer\";\nimport { AppDispatch, AppStateType } from \"../../redux/reduxStore\";\nimport { useSelector } from 'react-redux';\nimport { ChatMessageAPIType } from \"../../api/chat-api\";\nimport classes from './ChatPage.module.css'\nimport TextArea from \"antd/es/input/TextArea\";\n\nconst ChatPage: FC = () => {\n\n\n    return (\n        <div>\n            <Chat />\n        </div>\n    )\n}\n\nconst Chat: FC = () => {\n\n    const dispatch: AppDispatch = useDispatch()\n\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    useEffect(() => {\n        dispatch(startMessagesListeningThunkCreator())\n        return () => {\n            dispatch(stopMessagesListeningThunkCreator())\n        }\n    }, [])\n\n    return (\n        <div>\n            {status === 'error' && <div>Some error occured. Please refresh page.</div>}\n            <>\n                <Messages />\n                <AddMessageForm />\n            </>\n        </div>\n    )\n}\n\nconst Messages: FC = () => {\n\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n    const [isAutoScroll, setAutoScroll] = useState(false)\n\n    const scrollHandler = (e: UIEvent) => {\n        const element = e.currentTarget\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 1000) {\n            !isAutoScroll && setAutoScroll(true)\n        } else {\n            isAutoScroll && setAutoScroll(false)\n        }\n    }\n\n    useEffect(() => {\n        if (isAutoScroll) {\n            messagesAnchorRef.current?.scrollIntoView({block: 'end', behavior: 'smooth'})\n        }\n    }, [messages])\n\n    return (\n        <div className={classes.messages} onScroll={scrollHandler}>\n          {messages.map((message) => <Message key={message.id} message={message}/>)}\n          <div ref={messagesAnchorRef}></div>\n        </div>\n    )\n}\n\nconst Message: FC<{message: ChatMessageAPIType}> = memo(({message}) => {\n\n    return (\n        <div>\n            <Avatar src={message.photo} style={{width: '30px'}}/> <b>{message.userName}</b>\n            <br />\n            {message.message}\n            <hr />\n        </div>\n    )\n})\n\nconst AddMessageForm: FC = () => {\n\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    const dispatch: AppDispatch = useDispatch()\n\n    const [message, setMessage] = useState('')\n\n    const sendMessage = () => {\n        if(message) {\n            dispatch(sendMessageThunkCreator(message))\n            setMessage('')\n        } else return\n    }\n\n    return (\n        <div>\n        <div><TextArea  onChange={(e) => setMessage(e.currentTarget.value)} value={message} autoSize className={classes.messageInput}></TextArea></div>\n        <div><Button type='primary' onClick={sendMessage} disabled={status !== 'ready'}>Send</Button></div>\n        </div>\n    )\n}\n\nexport default ChatPage"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListeningThunkCreator","stopMessagesListeningThunkCreator","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setAutoScroll","current","scrollIntoView","block","behavior","className","classes","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","message","Message","id","ref","memo","src","photo","style","width","userName","setMessage","TextArea","onChange","value","autoSize","type","onClick","sendMessageThunkCreator","disabled"],"sourceRoot":""}